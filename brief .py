import os, time, math, datetime, requests, re
from dotenv import load_dotenv

# ====== –ù–ê–°–¢–†–û–ô–ö–ò ======
# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –§–∏–±–æ (–∫–∞–∫ —Ç—ã –ø—Ä–æ—Å–∏–ª)
FIB_LEVELS = {
   "pyth": [("1.618", 1.8095), ("2.618", 2.8712), ("3.618", 3.9329)],
   "ada":  [("1.618", 4.8788), ("2.618", 7.7801), ("3.618",10.6815)],
   "fet":  [("1.618", 5.3960), ("2.618", 8.5070), ("3.618",11.6180)],
   "doge": [("1.618", 1.1597), ("2.618", 1.8442), ("3.618", 2.5287)],
   "arb":  [("1.618", 3.6833), ("2.618", 5.7914), ("3.618", 7.8996)],
   "wlfi": []  # —É—Ä–æ–≤–Ω–∏ –¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–µ—Ñ–µ—Ä–µ–Ω—Å-—Ü–µ–Ω–∞
}

# –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–∫–µ—Ä–æ–≤ CoinGecko
COINGECKO_IDS = {
   "btc":"bitcoin",
   "eth":"ethereum",
   "usdt":"tether",
   "pyth":"pyth-network",
   "ada":"cardano",
   "fet":"fetch-ai",
   "doge":"dogecoin",
   "arb":"arbitrum",
   "wlfi":"wlfi"  # –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç –Ω–∞ CG ‚Äî –≤–µ—Ä–Ω—ë–º N/A
}

# ====== –°–ï–ö–†–ï–¢–´ ======
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID   = os.getenv("TELEGRAM_CHAT_ID")

def send_msg(text: str):
   r = requests.post(
       f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage",
       data={"chat_id": CHAT_ID, "text": text, "parse_mode": "Markdown"},
       timeout=30
   )
   return r.status_code, r.text

def pct_emoji(p):
   return "üü¢" if (p is not None and p >= 0) else "üî¥"

def nice_usd(x, digits=2):
   return f"${x:,.{digits}f}"

# ====== COINGECKO ======
def cg_simple_prices(ids, vs="usd"):
   url = "https://api.coingecko.com/api/v3/simple/price"
   params = {"ids": ",".join(ids), "vs_currencies": vs, "include_24hr_change": "true"}
   r = requests.get(url, params=params, timeout=40)
   return r.json() if r.status_code == 200 else {}

def cg_global():
   r = requests.get("https://api.coingecko.com/api/v3/global", timeout=40)
   return r.json().get("data", {}) if r.status_code == 200 else {}

def cg_market_cap(id_):
   url = f"https://api.coingecko.com/api/v3/coins/{id_}"
   r = requests.get(url, params={
       "localization":"false","tickers":"false","market_data":"true",
       "community_data":"false","developer_data":"false","sparkline":"false"
   }, timeout=40)
   if r.status_code == 200:
       md = r.json().get("market_data",{})
       return md.get("market_cap",{}).get("usd")
   return None

def cg_last_daily_ohlc(id_):
   """–ü–æ—Å–ª–µ–¥–Ω—è—è –¥–Ω–µ–≤–Ω–∞—è —Å–≤–µ—á–∞ (–∑–∞ 2 –¥–Ω—è), —Ñ–æ—Ä–º–∞—Ç [t, o, h, l, c]."""
   url = f"https://api.coingecko.com/api/v3/coins/{id_}/ohlc"
   r = requests.get(url, params={"vs_currency":"usd","days":"2"}, timeout=40)
   if r.status_code == 200 and isinstance(r.json(), list) and r.json():
       return r.json()[-1]
   return None

def has_upper_wick(ohlc):
   """–≠–≤—Ä–∏—Å—Ç–∏–∫–∞ ¬´—Ö–≤–æ—Å—Ç —Å–≤–µ—Ä—Ö—É¬ª: –≤–µ—Ä—Ö–Ω—è—è —Ç–µ–Ω—å >> —Ç–µ–ª–∞ –∏ >1% –æ—Ç —Ü–µ–Ω—ã."""
   try:
       _, o, h, l, c = ohlc
       body = abs(c - o)
       upper = h - max(o, c)
       if upper > 0.015 * c and (body == 0 or upper > 1.5 * body):
           return True
       return False
   except:
       return False

# ====== –ú–ï–¢–†–ò–ö–ò/–ù–û–í–û–°–¢–ò ======
def fear_greed():
   try:
       r = requests.get("https://api.alternative.me/fng/?limit=1&format=json", timeout=20)
       if r.status_code == 200:
           v = r.json()["data"][0]
           return int(v["value"])
   except:
       pass
   return None

def fng_grade(v):
   # üü¢ –¥–æ 40 / üü° 40‚Äì65 / üî¥ >65
   if v is None: return "‚ö™Ô∏è"
   if v > 65: return "üî¥"
   if v >= 40: return "üü°"
   return "üü¢"

def headlines():
   try:
       rss = requests.get("https://www.coindesk.com/arc/outboundfeeds/rss/", timeout=20).text
       titles = re.findall(r"<title>([^<]+)</title>", rss)
       items = [t for t in titles[1:4] if t and "CoinDesk" not in t][:3]
       return items
   except:
       return []

# ====== –ë–†–ò–§ ======
def build_brief():
   # 1) –¶–µ–Ω—ã
   ids = [COINGECKO_IDS[x] for x in ["btc","eth","pyth","ada","fet","doge","arb","wlfi"] if COINGECKO_IDS.get(x)]
   prices = cg_simple_prices(ids)

   def get_price_change(cg_id):
       d = prices.get(cg_id, {})
       return d.get("usd"), d.get("usd_24h_change")

   btc_p, btc_ch = get_price_change(COINGECKO_IDS["btc"])
   eth_p, eth_ch = get_price_change(COINGECKO_IDS["eth"])

   # 2) –î–æ–º–∏–Ω–∞—Ü–∏–∏ –∏ TOTAL2
   g = cg_global()
   total_mcap = (g.get("total_market_cap") or {}).get("usd")
   btc_mcap   = cg_market_cap(COINGECKO_IDS["btc"])
   usdt_mcap  = cg_market_cap(COINGECKO_IDS["usdt"])

   usdt_dom = round(100*usdt_mcap/total_mcap, 2) if usdt_mcap and total_mcap else None
   total2   = (total_mcap - btc_mcap) if total_mcap and btc_mcap else None

   # 3) –ú–µ—Ç—Ä–∏–∫–∏
   fng = fear_greed()
   fng_g = fng_grade(fng)

   # 4) –ü–æ—Ä—Ç—Ñ–µ–ª—å
   def coin_block(tk, label):
       cgid = COINGECKO_IDS.get(tk)
       price, chg = (None, None)
       if cgid:
           price, chg = get_price_change(cgid)
       price_s = nice_usd(price, 4) if isinstance(price,(int,float)) else "N/A"
       chg_s = f"{chg:+.2f}%" if isinstance(chg,(int,float)) else "N/A"
       em = pct_emoji(chg if isinstance(chg,(int,float)) else 0)

       fibs = FIB_LEVELS.get(tk, [])
       if fibs:
           fib_text = " | ".join([f"{lvl} ‚Üí {nice_usd(val,4)}" for lvl,val in fibs])
           fib_line = "\n" + "   " + fib_text
       else:
           fib_line = "\n   (—É—Ä–æ–≤–Ω–∏ –¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ)"

       alert = ""
       if cgid:
           ohlc = cg_last_daily_ohlc(cgid)
           if ohlc and has_upper_wick(ohlc):
               alert = "\n   ‚ö†Ô∏è *–ï—Å—Ç—å —Ö–≤–æ—Å—Ç —Å–≤–µ—Ä—Ö—É –Ω–∞ –¥–Ω–µ–≤–∫–µ* ‚Äî –±—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω –∫ —Ñ–∏–∫—Å–∞—Ü–∏–∏."

       return f"‚Ä¢ {label}: {price_s}  {chg_s} {em}" + fib_line + alert

   portfolio = "\n".join([
       coin_block("pyth","PYTH"),
       coin_block("ada","ADA"),
       coin_block("fet","FET"),
       coin_block("doge","DOGE"),
       coin_block("arb","ARB"),
       coin_block("wlfi","WLFI"),
   ])

   # 5) –ù–æ–≤–æ—Å—Ç–∏
   news = headlines()
   news_block = "\n".join([f"‚Ä¢ {t}" for t in news]) if news else "–í–∞–∂–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç."

   # 6) –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
   header = "üß† *–ï–ñ–ï–î–ù–ï–í–ù–´–ô –ë–†–ò–§*\n_(–∞–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞ –º–æ–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏)_\n"

   s1 = []
   def line_price(name, p, ch):
       p_s = nice_usd(p) if isinstance(p,(int,float)) else "N/A"
       ch_s = f"{ch:+.2f}%" if isinstance(ch,(int,float)) else "N/A"
       return f"‚Ä¢ {name}: {p_s}  {ch_s} {pct_emoji(ch if isinstance(ch,(int,float)) else 0)}"

   s1.append("*1) üìà –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—ã–Ω–∫–∞*")
   s1.append(line_price("BTC", btc_p, btc_ch))
   s1.append(line_price("ETH", eth_p, eth_ch))
   s1.append(f"‚Ä¢ USDT.D: {usdt_dom:.2f}%  {pct_emoji(0)}" if usdt_dom is not None else "‚Ä¢ USDT.D: N/A")
   s1.append(f"‚Ä¢ TOTAL2: {nice_usd(total2/1e12,3)} T  {pct_emoji(0)}" if isinstance(total2,(int,float)) else "‚Ä¢ TOTAL2: N/A")

   s2 = []
   s2.append("*2) üßÆ –ú–µ—Ç—Ä–∏–∫–∏ —Ä—ã–Ω–∫–∞*")
   s2.append(f"‚Ä¢ Fear & Greed: {fng if fng is not None else 'N/A'} ({fng_g})")
   s2.append("‚Ä¢ NUPL: N/A (–±–µ–∑ Glassnode) ‚ö™Ô∏è")
   s2.append("‚Ä¢ MVRV: N/A (–±–µ–∑ Glassnode) ‚ö™Ô∏è")
   s2.append("üí° *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* –ø—Ä–∏ —Ä–æ—Å—Ç–µ F&G –∫ 75‚Äì80 ‚Äî –ø–æ–≤—ã—à–∞–µ–º –Ω–∞—Å—Ç–æ—Ä–æ–∂–µ–Ω–Ω–æ—Å—Ç—å; –±–µ–∑ NUPL/MVRV –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–µ–º—Å—è –Ω–∞ —Ü–µ–Ω—É, —Ö–≤–æ—Å—Ç—ã –∏ USDT.D.")

   s3 = []
   s3.append("*3) üåï –ü–æ—Ä—Ç—Ñ–µ–ª—å ‚Äî —Ü–µ–Ω—ã –∏ —É—Ä–æ–≤–Ω–∏*")
   s3.append(portfolio)

   s4 = []
   s4.append("*4) üóû –ù–æ–≤–æ—Å—Ç–∏ –∑–∞ —Å—É—Ç–∫–∏*")
   s4.append(news_block)
   s4.append("üí¨ *–ù–∞ —á—Ç–æ —Å–º–æ—Ç—Ä–µ—Ç—å:* —Ä–µ–≥—É–ª—è—Ç–æ—Ä–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ (SEC/ETF), –∫—Ä—É–ø–Ω—ã–µ –ª–∏—Å—Ç–∏–Ω–≥–∏ –∏ —Ö–∞—Ä–¥—Ñ–æ—Ä–∫–∏ ‚Äî —ç—Ç–æ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏.")

   s5 = []
   s5.append("*5) üìâ –°–∏–≥–Ω–∞–ª—ã —Ä–∏—Å–∫–∞/—Ñ–∏–∫—Å–∞—Ü–∏–∏*")
   s5.append("‚Ä¢ –î–ª–∏–Ω–Ω—ã–µ —Ç–µ–Ω–∏ —Å–≤–µ—Ä—Ö—É –Ω–∞ –¥–Ω–µ–≤–∫–µ + —Ä—ã–≤–æ–∫ > 8‚Äì10% –∑–∞ —Å—É—Ç–∫–∏ ‚Üí —á–∞—Å—Ç–∏—á–Ω–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è.")
   s5.append("‚Ä¢ –†–æ—Å—Ç USDT.D –≤–º–µ—Å—Ç–µ —Å –ø—Ä–æ—Å–∞–¥–∫–æ–π TOTAL2 ‚Üí —Ä–∏—Å–∫ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞/—à–æ—Ä—Ç-—Å–∫–≤–∏–∑–∞.")
   s5.append("‚Ä¢ –ü—Ä–∏ F&G ‚Üí üî¥ ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Å—Ç—É–ø–µ–Ω—á–∞—Ç–æ.")

   text = header + "\n".join(["\n".join(s1), "\n".join(s2), "\n".join(s3), "\n".join(s4), "\n".join(s5)])
   return text

def main():
   txt = build_brief()
   code, resp = send_msg(txt)
   print("Telegram:", code, resp)

if __name__ == "__main__":
   main()
